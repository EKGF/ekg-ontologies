@base <https://ekgf.org/ontology/specification-by-example#> .
@prefix : <https://ekgf.org/ontology/specification-by-example#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
# 
# 
# #################################################################
# #
# #    Object Properties
# #
# #################################################################
# 
# 
# https://ekgf.org/ontology/specification-by-example#conceptValue
# 
# https://ekgf.org/ontology/specification-by-example#dataset
# 
# https://ekgf.org/ontology/specification-by-example#given
# 
# https://ekgf.org/ontology/specification-by-example#hasDataset
# 
# https://ekgf.org/ontology/specification-by-example#hasGraph
# 
# https://ekgf.org/ontology/specification-by-example#hasScenario
# 
# https://ekgf.org/ontology/specification-by-example#isDependedOnInState
# 
# https://ekgf.org/ontology/specification-by-example#isGivenStateOf
# 
# https://ekgf.org/ontology/specification-by-example#isGraphInState
# 
# https://ekgf.org/ontology/specification-by-example#isUsedInGraph
# 
# https://ekgf.org/ontology/specification-by-example#storyParametersForScenario
# 
# https://ekgf.org/ontology/specification-by-example#then
# 
# https://ekgf.org/ontology/specification-by-example#validates
# 
# https://ekgf.org/ontology/specification-by-example#when
# 
# 
# 
# #################################################################
# #
# #    Data properties
# #
# #################################################################
# 
# 
# https://ekgf.org/ontology/specification-by-example#key
# 
# https://ekgf.org/ontology/specification-by-example#namedGraph
# 
# https://ekgf.org/ontology/specification-by-example#value
# 
# 
# 
# #################################################################
# #
# #    Classes
# #
# #################################################################
# 
# 
# https://ekgf.org/ontology/dataset#Dataset
# 
# https://ekgf.org/ontology/specification-by-example#ConceptValue
# 
# https://ekgf.org/ontology/specification-by-example#Graph
# 
# https://ekgf.org/ontology/specification-by-example#Scenario
# 
# https://ekgf.org/ontology/specification-by-example#State
# 
# https://ekgf.org/ontology/specification-by-example#StoryRequest
# 
# https://ekgf.org/ontology/story#Story
# 
# Generated by the OWL API (version 4.5.26.2023-07-17T20:34:13Z) https://github.com/owlcs/owlapi

<#> a owl:Ontology;
  rdfs:label "Specification by example" .

:conceptValue a owl:ObjectProperty;
  rdfs:domain :StoryRequest;
  rdfs:range :ConceptValue .

:dataset a owl:ObjectProperty;
  owl:inverseOf :isDependedOnInState;
  rdfs:domain :State;
  rdfs:range <dataset#Dataset> .

:given a owl:ObjectProperty;
  owl:inverseOf :isGivenStateOf;
  rdfs:domain :Scenario;
  rdfs:range :State .

:hasDataset a owl:ObjectProperty;
  owl:inverseOf :isUsedInGraph;
  rdfs:domain :Graph;
  rdfs:range <dataset#Dataset>;
  rdfs:comment """a State can have one or more Graphs where each Graph can have one
   or more Datasets"""@en;
  rdfs:label "has Dataset"@en .

:hasGraph a owl:ObjectProperty;
  owl:inverseOf :isGraphInState;
  rdfs:domain :State;
  rdfs:range :Graph;
  rdfs:comment "Any Scenario State can have one or more Graphs"@en;
  rdfs:label "has Graph"@en .

:hasScenario a owl:ObjectProperty;
  owl:inverseOf :validates;
  rdfs:domain <story#Story>;
  rdfs:range :Scenario .

:isDependedOnInState a owl:ObjectProperty;
  rdfs:domain <dataset#Dataset>;
  rdfs:range :State;
  rdfs:comment "Usually inferred from the inverse `sbe:dataset`"@en;
  rdfs:label "is depended on in state"@en .

:isGivenStateOf a owl:ObjectProperty;
  rdfs:domain :State;
  rdfs:range :Scenario;
  rdfs:comment "Usually inferred from inverse `sbe:given`"@en .

:isGraphInState a owl:ObjectProperty;
  rdfs:domain :Graph;
  rdfs:range :State;
  rdfs:comment "Usually inferred, a Graph can be part of one or more States"@en;
  rdfs:label "is Graph in State"@en .

:isUsedInGraph a owl:ObjectProperty;
  rdfs:domain <dataset#Dataset>;
  rdfs:range :Graph .

:storyParametersForScenario a owl:ObjectProperty;
  owl:inverseOf :when;
  rdfs:domain :State;
  rdfs:range :Scenario;
  rdfs:comment "Usually inferred from inverse `sbe:when`"@en .

:then a owl:ObjectProperty;
  rdfs:domain :Scenario;
  rdfs:range :State .

:validates a owl:ObjectProperty, owl:FunctionalProperty;
  rdfs:domain :Scenario;
  rdfs:range <story#Story> .

:when a owl:ObjectProperty;
  rdfs:domain :Scenario;
  rdfs:range :StoryRequest .

:key a owl:DatatypeProperty;
  rdfs:domain :ConceptValue;
  rdfs:comment "TODO: Get rid of this (in all scenarios) and rely on concept IRI instead"@en .

:namedGraph a owl:DatatypeProperty;
  rdfs:domain :Graph;
  rdfs:range xsd:anyURI .

:value a owl:DatatypeProperty;
  rdfs:domain :ConceptValue .

<dataset#Dataset> a owl:Class .

:ConceptValue a owl:Class;
  rdfs:comment "This is the value for a test concept"@en;
  rdfs:isDefinedBy <#>;
  rdfs:label "Concept Value"@en, "Valor do Conceito"@pt .

:Graph a owl:Class;
  rdfs:comment "A Graph in a Scenario State, every Scenario State (either the Given-state or the Then-state) can have one or more Graphs."@en;
  rdfs:isDefinedBy <#>;
  rdfs:label "Graph"@en .

:Scenario a owl:Class;
  rdfs:isDefinedBy <#>;
  rdfs:label "Scenario"@en .

:State a owl:Class;
  rdfs:isDefinedBy <#>;
  rdfs:label "State"@en .

:StoryRequest a owl:Class;
  rdfs:comment "The inputs to the story that is being tested in the given Scenario"@en;
  rdfs:isDefinedBy <#>;
  rdfs:label "Story Request"@en .

<story#Story> a owl:Class .
